<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>IDLE</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>date_set_timezone(timezone_local)

numTargets = 25;
nextTarget = 0;
mode = 0;

sr = sprite_width/2
chx = room_width/2;
chy = room_height/2;

timer = 0
errors = 0

sequence[25] = 0
sequence[0]  = 0
sequence[1]  = 13
sequence[2]  = 1
sequence[3]  = 14
sequence[4]  = 2
sequence[5]  = 15
sequence[6]  = 3
sequence[7]  = 16
sequence[8]  = 4
sequence[9]  = 17
sequence[10] = 5
sequence[11] = 18
sequence[12] = 6
sequence[13] = 19
sequence[14] = 7
sequence[15] = 20
sequence[16] = 8
sequence[17] = 21
sequence[18] = 9
sequence[19] = 22
sequence[20] = 10
sequence[21] = 23
sequence[22] = 11
sequence[23] = 24
sequence[24] = 12

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(mode){
    case 0: //select mode
        chx = mouse_x
        chy = mouse_y
        break;
        
    case 1: //Xbox Analogue
        haxis = gamepad_axis_value(0, gp_axislh)
        vaxis = gamepad_axis_value(0, gp_axislv)
        if(abs(haxis)&lt;0.025){haxis=0;}
        if(abs(vaxis)&lt;0.025){vaxis=0;}
        chx += haxis*20
        chy += vaxis*20
        if(actionPressed()){        
            angle = degtorad(sequence[nextTarget]*360/numTargets)-degtorad(90)
            radius = room_height/2.3
            xx = room_width/2 + radius * cos(angle)
            yy = room_height/2 + radius * sin(angle)
        
            if( chx &lt; xx+32 and chx &gt; xx-32 and chy &lt; yy+32 and chy &gt; yy-32 ){
                file_text_write_string(file, string(nextTarget)+chr(9)) //record target#
                nextTarget++ //select next target
                file_text_write_string(file, string(floor((get_timer()-timer)/1000))+chr(9)) //record timer
                file_text_write_string(file, string(errors)+chr(10)) //record error
                errors = 0 //reset errors
                timer = get_timer() //reset time
            }
            else{
                errors++
            }
        }        
        break;
        
    case 2: //Xbox Ball Mouse
        chx = mouse_x
        chy = mouse_y
        if(actionPressed()){        
            angle = degtorad(sequence[nextTarget]*360/numTargets)-degtorad(90)
            radius = room_height/2.3
            xx = room_width/2 + radius * cos(angle)
            yy = room_height/2 + radius * sin(angle)
        
            if( chx &lt; xx+32 and chx &gt; xx-32 and chy &lt; yy+32 and chy &gt; yy-32 ){
                file_text_write_string(file, string(nextTarget)+chr(9)) //record target#
                nextTarget++ //select next target
                file_text_write_string(file, string(floor((get_timer()-timer)/1000))+chr(9)) //record (timer)
                file_text_write_string(file, string(errors)+chr(10)) //record error
                errors = 0 //reset errors
                timer = get_timer() //reset time
            }
            else{
                errors++
            }
        }
        break;
        
    case 3: //Steam Controller
        chx = mouse_x
        chy = mouse_y
        if(actionPressed()){        
            angle = degtorad(sequence[nextTarget]*360/numTargets)-degtorad(90)
            radius = room_height/2.3
            xx = room_width/2 + radius * cos(angle)
            yy = room_height/2 + radius * sin(angle)
        
            if( chx &lt; xx+32 and chx &gt; xx-32 and chy &lt; yy+32 and chy &gt; yy-32 ){
                file_text_write_string(file, string(nextTarget)+chr(9)) //record target#
                nextTarget++ //select next target
                file_text_write_string(file, string(floor((get_timer()-timer)/1000))+chr(9)) //record (timer)
                file_text_write_string(file, string(errors)+chr(10)) //record error
                errors = 0 //reset errors
                timer = get_timer() //reset time
            }
            else{
                errors++
            }
        }
        break;        
}

if(nextTarget&gt;25){
    game_end()
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mode==0){ //select a mode
    if(keyboard_check_released(ord('1'))){
        mode = 1;
        timer = get_timer();
        chx = room_width/2;
        chy = room_height/2;
        file = file_text_open_write(working_directory
                                    + "\"
                                    + string(date_get_month(date_current_datetime()))
                                    + "-"+string(date_get_day(date_current_datetime()))
                                    + "-"+string(date_get_hour(date_current_datetime()))
                                    + "-"+string(date_get_minute(date_current_datetime()))
                                    + "-"+string(date_get_second(date_current_datetime()))
                                    + "-"+"XBOX.txt");
        file_text_write_string(file, "Target"+chr(9))
        file_text_write_string(file, "Time(ms)"+chr(9))
        file_text_write_string(file, "Errors"+chr(10))
    }
    if(keyboard_check_released(ord('2'))){
        mode = 2;
        timer = get_timer();
        chx = room_width/2;
        chy = room_height/2;
        file = file_text_open_write(working_directory
                                    + "\"
                                    + string(date_get_month(date_current_datetime()))
                                    + "-"+string(date_get_day(date_current_datetime()))
                                    + "-"+string(date_get_hour(date_current_datetime()))
                                    + "-"+string(date_get_minute(date_current_datetime()))
                                    + "-"+string(date_get_second(date_current_datetime()))
                                    + "-"+"TRACKBALL.txt");
        file_text_write_string(file, "Target"+chr(9))
        file_text_write_string(file, "Time(ms)"+chr(9))
        file_text_write_string(file, "Errors"+chr(10))
    }
    if(keyboard_check_released(ord('3'))){
        mode = 3;
        timer = get_timer();
        chx = room_width/2;
        chy = room_height/2;
        file = file_text_open_write(working_directory
                                    + "\"
                                    + string(date_get_month(date_current_datetime()))
                                    + "-"+string(date_get_day(date_current_datetime()))
                                    + "-"+string(date_get_hour(date_current_datetime()))
                                    + "-"+string(date_get_minute(date_current_datetime()))
                                    + "-"+string(date_get_second(date_current_datetime()))
                                    + "-"+"STEAM.txt");
        file_text_write_string(file, "Target"+chr(9))
        file_text_write_string(file, "Time(ms)"+chr(9))
        file_text_write_string(file, "Errors"+chr(10))
    }
    
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_font(font0)
    draw_set_color(c_black)
    draw_text_ext(room_width/2+2,room_height/2+2,"PRESS 1
                                                  #Xbox Analogue Controller
                                                  ###PRESS 2
                                                  #Xbox TrackBall Controller
                                                  ###PRESS 3
                                                  #Steam Controller",30,1000)
    draw_set_color(c_white)
    draw_text_ext(room_width/2, room_height/2, "PRESS 1
                                                #Xbox Analogue Controller
                                                ###PRESS 2
                                                #Xbox TrackBall Controller
                                                ###PRESS 3
                                                #Steam Controller",30,1000)
}
else{ //Xbox Analogue
    for(i=0; i&lt;numTargets; i++){
        drawTarget(i,nextTarget)
    }
    if(nextTarget == numTargets){
        drawTarget(nextTarget,nextTarget)
    }
}

draw_sprite(CROSSHAIR,0,chx,chy)
switch(mode){
    case 1: draw_text(room_width/2+2, room_height/2+2, "Xbox Analogue")
        break;
    case 2: draw_text(room_width/2+2, room_height/2+2, "Xbox Track Ball")
        break;
    case 3: draw_text(room_width/2+2, room_height/2+2, "Steam Controller")
        break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
